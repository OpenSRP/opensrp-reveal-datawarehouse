-- Deploy reveal_irs_lite_zambia_202020:remove_hard_coded_jurisdiction_depth to pg
-- requires: reveal_database_views:jurisdictions_tree

BEGIN;

SET search_path TO :"schema",public;

--
-- Modify views
---

-- Add zambia_irs_lite_operational_areas in pending.
DROP MATERIALIZED VIEW IF EXISTS pending_:schema .zambia_irs_lite_operational_areas CASCADE;

CREATE MATERIALIZED VIEW IF NOT EXISTS pending_:schema .zambia_irs_lite_operational_areas AS
SELECT
    main_query.*,
    CASE
        WHEN main_query.totStruct = 0 THEN 0
        ELSE CAST(main_query.sprayed AS DECIMAL)/CAST(main_query.totStruct AS DECIMAL)
    END AS sprayCov,
    CASE
        WHEN main_query.targStruct = 0 THEN 0
        ELSE CAST(main_query.sprayed AS DECIMAL)/CAST(main_query.targStruct AS DECIMAL)
    END AS sprayCovTarg,
    CASE
        WHEN main_query.targStruct = 0 THEN 0
        ELSE CAST(main_query.found AS DECIMAL)/CAST(main_query.targStruct AS DECIMAL)
    END AS foundCoverage,
    CASE
        WHEN main_query.found = 0 THEN 0
        ELSE CAST(main_query.sprayed AS DECIMAL)/CAST(main_query.found AS DECIMAL)
    END AS spraySuccess
FROM (
    SELECT
        public.uuid_generate_v5(
            '6ba7b810-9dad-11d1-80b4-00c04fd430c8',
            concat(operational_area_query.structure_jurisdiction_id, operational_area_query.plan_id)
        ) AS id,
        operational_area_query.plan_id as plan_id,
        zambia_lite_jurisdictions.jurisdiction_id AS jurisdiction_id,
        zambia_lite_jurisdictions.jurisdiction_parent_id AS jurisdiction_parent_id,
        zambia_lite_jurisdictions.jurisdiction_name AS jurisdiction_name,
        zambia_lite_jurisdictions.jurisdiction_depth AS jurisdiction_depth,
        zambia_lite_jurisdictions.jurisdiction_path AS jurisdiction_path,
        zambia_lite_jurisdictions.jurisdiction_name_path AS jurisdiction_name_path,
        operational_area_query.targAreas,
        operational_area_query.visitedAreas,
        operational_area_query.found,
        operational_area_query.sprayed,
        COALESCE(jurisdiction_structure_query.structure, 0) AS totStruct,
        COALESCE(jurisdiction_target_query.target, 0) AS targStruct,
        COALESCE(totAreas_query.totAreas, 0) AS totAreas
    FROM plans
    LEFT JOIN (
        SELECT
            jurisdictions.plan_id,
            jurisdictions.structure_jurisdiction_id,
            sum(jurisdictions.targAreas) AS targAreas,
            sum(jurisdictions.visitedAreas) AS visitedAreas,
            COALESCE(sum(daily_summary.daily_found), 0) AS found,
            COALESCE(sum(daily_summary.daily_sprayed), 0) AS sprayed
        FROM (
            SELECT
                structures.plan_id,
                structures.structure_jurisdiction_id,
                COALESCE(COUNT(structures.structure_id) , 0) AS targAreas,
                COALESCE(COUNT(structures.structure_id) FILTER (WHERE structures.task_status = 'Completed') , 0) AS visitedAreas
            FROM zambia_irs_lite_structures AS structures
            WHERE structures.plan_id IS NOT NULL
            GROUP BY structures.plan_id, structures.structure_jurisdiction_id
        ) AS jurisdictions
        LEFT JOIN LATERAL (
            -- This could data potentially be found from the Zambia-2020/zambia_daily_summary_event materialized view.
            SELECT
            subq.daily_sprayed AS daily_sprayed,
            subq.daily_found AS daily_found
            FROM (
                SELECT
                    SUM(COALESCE (events.form_data->'sprayed'->>0, '0')::int) AS daily_sprayed,
                    SUM(COALESCE (events.form_data->'found'->>0, '0')::int) AS daily_found
                FROM events
                WHERE jurisdictions.structure_jurisdiction_id  = events.location_id
                AND events.plan_id = jurisdictions.plan_id
                AND events.entity_type = 'Structure'
                AND events.event_type = 'daily_summary'
                GROUP BY jurisdictions.plan_id, jurisdictions.structure_jurisdiction_id
            ) AS subq
        ) AS daily_summary ON true
        GROUP BY jurisdictions.plan_id, jurisdictions.structure_jurisdiction_id
    ) AS operational_area_query ON operational_area_query.plan_id = plans.identifier
    LEFT JOIN jurisdictions_tree AS zambia_lite_jurisdictions
        ON operational_area_query.structure_jurisdiction_id = zambia_lite_jurisdictions.jurisdiction_id
    LEFT JOIN LATERAL (
        SELECT
            COALESCE(COUNT(locations.id) , 0) AS totAreas
        FROM locations
        WHERE operational_area_query.structure_jurisdiction_id = locations.jurisdiction_id
        AND locations.geographic_level = 4
    ) AS totAreas_query ON true
    -- The assumption is that the jurisdiction_metadata-target and jurisdiction_metadata-structures are uploaded
    -- against the operational area and not the "structures" inside of an operational area
    LEFT JOIN LATERAL (
        SELECT
            key as jurisdiction_id,
            COALESCE(data->>'value', '0')::INTEGER as target
        FROM opensrp_settings
        WHERE identifier = 'jurisdiction_metadata-target'
        AND operational_area_query.structure_jurisdiction_id = opensrp_settings.key
        ORDER BY COALESCE(data->>'serverVersion', '0')::BIGINT DESC
        LIMIT 1
    ) AS jurisdiction_target_query ON true
    LEFT JOIN LATERAL (
        SELECT
            key as jurisdiction_id,
            COALESCE(data->>'value', '0')::INTEGER as structure
        FROM opensrp_settings
        WHERE identifier = 'jurisdiction_metadata-structures'
        AND operational_area_query.structure_jurisdiction_id = opensrp_settings.key
        ORDER BY COALESCE(data->>'serverVersion', '0')::BIGINT DESC
        LIMIT 1
    ) AS jurisdiction_structure_query ON true
    WHERE plans.intervention_type IN ('IRS-Lite') AND plans.status NOT IN ('draft', 'retired')
) AS main_query;

CREATE INDEX IF NOT EXISTS zambia_irs_lite_operational_areas_path_idx_gin on pending_:schema .zambia_irs_lite_operational_areas using GIN(jurisdiction_path);
CREATE INDEX IF NOT EXISTS zambia_irs_lite_operational_areas_plan_idx ON pending_:schema .zambia_irs_lite_operational_areas (plan_id);
CREATE INDEX IF NOT EXISTS zambia_irs_lite_operational_areas_jurisdiction_idx ON pending_:schema .zambia_irs_lite_operational_areas (jurisdiction_id);
CREATE INDEX IF NOT EXISTS zambia_irs_lite_operational_areas_jurisdiction_parent_idx ON pending_:schema .zambia_irs_lite_operational_areas (jurisdiction_parent_id);
CREATE UNIQUE INDEX IF NOT EXISTS zambia_irs_lite_operational_areas_idx ON pending_:schema .zambia_irs_lite_operational_areas (id);

-- Add zambia_irs_lite_jurisdictions in pending.
DROP MATERIALIZED VIEW IF EXISTS pending_:schema .zambia_irs_lite_jurisdictions CASCADE;

CREATE MATERIALIZED VIEW IF NOT EXISTS pending_:schema .zambia_irs_lite_jurisdictions
AS
SELECT *
FROM
(
    (
        SELECT DISTINCT ON (jurisdictions_query.jurisdiction_id, plans.identifier)
            public.uuid_generate_v5(
                '6ba7b810-9dad-11d1-80b4-00c04fd430c8',
                concat(jurisdictions_query.jurisdiction_id, plans.identifier)) AS id,
            plans.identifier as plan_id,
            jurisdictions_query.jurisdiction_id AS jurisdiction_id,
            jurisdictions_query.jurisdiction_parent_id AS jurisdiction_parent_id,
            jurisdictions_query.jurisdiction_name AS jurisdiction_name,
            jurisdictions_query.jurisdiction_depth AS jurisdiction_depth,
            jurisdictions_query.jurisdiction_path AS jurisdiction_path,
            jurisdictions_query.jurisdiction_name_path AS jurisdiction_name_path,
            jurisdictions_query.totStruct AS totStruct,
            jurisdictions_query.targStruct AS targStruct,
            jurisdictions_query.sprayed AS sprayed,
            jurisdictions_query.found AS found,
            jurisdictions_query.totAreas AS totAreas,
            jurisdictions_query.targAreas AS targAreas,
            jurisdictions_query.visitedAreas AS visitedAreas,
            jurisdictions_query.sprayCovTarg AS sprayCov,
            jurisdictions_query.sprayCovTarg AS sprayCovTarg,
            jurisdictions_query.foundCoverage AS foundCoverage,
            jurisdictions_query.spraySuccess AS spraySuccess
        FROM plans
        LEFT JOIN LATERAL (
            SELECT
                zambia_lite_jurisdictions.jurisdiction_id AS jurisdiction_id,
                COALESCE(zambia_lite_jurisdictions.jurisdiction_parent_id, '') AS jurisdiction_parent_id,
                zambia_lite_jurisdictions.jurisdiction_name AS jurisdiction_name,
                zambia_lite_jurisdictions.jurisdiction_geometry AS jurisdiction_geometry,
                zambia_lite_jurisdictions.jurisdiction_depth AS jurisdiction_depth,
                zambia_lite_jurisdictions.jurisdiction_path AS jurisdiction_path,
                zambia_lite_jurisdictions.jurisdiction_name_path AS jurisdiction_name_path,
                COALESCE(jurisdiction_structure_query.structure, zambia_focus_area_irs_query.totStruct, 0) AS totStruct,
                COALESCE(jurisdiction_target_query.target, zambia_focus_area_irs_query.targStruct, 0) AS targStruct,
                zambia_focus_area_irs_query.sprayed AS sprayed,
                zambia_focus_area_irs_query.found AS found,
                COALESCE(totAreas_query.totAreas, 0) AS totAreas,
                zambia_focus_area_irs_query.targAreas AS targAreas,
                zambia_focus_area_irs_query.visitedAreas AS visitedAreas,
                CASE
                    WHEN COALESCE(jurisdiction_structure_query.structure, zambia_focus_area_irs_query.totStruct, 0) = 0 THEN 0
                    ELSE CAST(zambia_focus_area_irs_query.sprayed AS DECIMAL)/CAST(COALESCE(jurisdiction_structure_query.structure, zambia_focus_area_irs_query.totStruct, 0) AS DECIMAL)
                END AS sprayCov,
                CASE
                    WHEN COALESCE(jurisdiction_target_query.target, zambia_focus_area_irs_query.targStruct, 0) = 0 THEN 0
                    ELSE CAST(zambia_focus_area_irs_query.sprayed AS DECIMAL)/CAST(COALESCE(jurisdiction_target_query.target, zambia_focus_area_irs_query.targStruct, 0) AS DECIMAL)
                END AS sprayCovTarg,
                CASE
                    WHEN COALESCE(jurisdiction_target_query.target, zambia_focus_area_irs_query.targStruct, 0) = 0 THEN 0
                    ELSE CAST(zambia_focus_area_irs_query.found AS DECIMAL)/CAST(COALESCE(jurisdiction_target_query.target, zambia_focus_area_irs_query.targStruct, 0) AS DECIMAL)
                END AS foundCoverage,
                CASE
                    WHEN zambia_focus_area_irs_query.found = 0 THEN 0
                    ELSE CAST(zambia_focus_area_irs_query.sprayed AS DECIMAL)/CAST(zambia_focus_area_irs_query.found AS DECIMAL)
                END AS spraySuccess
            FROM jurisdictions_tree AS zambia_lite_jurisdictions
            LEFT JOIN LATERAL (
                SELECT
                    COALESCE(SUM(targAreas), 0) AS targAreas,
                    COALESCE(SUM(visitedAreas), 0) AS visitedAreas,
                    COALESCE(SUM(totStruct), 0) AS totStruct,
                    COALESCE(SUM(targStruct), 0) AS targStruct,
                    COALESCE(SUM(sprayed), 0) AS sprayed,
                    COALESCE(SUM(found), 0) AS found
                FROM pending_:schema .zambia_irs_lite_operational_areas AS zirloa
                WHERE zirloa.plan_id = plans.identifier
                AND zirloa.jurisdiction_path @> ARRAY[zambia_lite_jurisdictions.jurisdiction_id]
            ) AS zambia_focus_area_irs_query ON true
            LEFT JOIN LATERAL (
                SELECT
                    COALESCE(COUNT(locations.id) , 0) AS totAreas
                FROM locations
                LEFT JOIN jurisdictions_tree
                    ON jurisdictions_tree.jurisdiction_id = locations.jurisdiction_id
                WHERE jurisdictions_tree.jurisdiction_path  @> ARRAY[zambia_lite_jurisdictions.jurisdiction_id]
                AND locations.geographic_level = 4
            ) AS totAreas_query ON true
            LEFT JOIN LATERAL (
                SELECT
                    key as jurisdiction_id,
                    COALESCE(data->>'value', '0')::INTEGER as target
                FROM opensrp_settings
                WHERE identifier = 'jurisdiction_metadata-target'
                AND zambia_lite_jurisdictions.jurisdiction_id = opensrp_settings.key
                ORDER BY COALESCE(data->>'serverVersion', '0')::BIGINT DESC
                LIMIT 1
            ) AS jurisdiction_target_query ON true
            LEFT JOIN LATERAL (
                SELECT
                    key as jurisdiction_id,
                    COALESCE(data->>'value', '0')::INTEGER as structure
                FROM opensrp_settings
                WHERE identifier = 'jurisdiction_metadata-structures'
                AND zambia_lite_jurisdictions.jurisdiction_id = opensrp_settings.key
                ORDER BY COALESCE(data->>'serverVersion', '0')::BIGINT DESC
                LIMIT 1
            ) AS jurisdiction_structure_query ON true
            WHERE zambia_lite_jurisdictions.is_leaf_node = FALSE
            AND zambia_focus_area_irs_query.targAreas > 0
        ) AS jurisdictions_query ON true
        WHERE plans.intervention_type IN ('IRS-Lite') AND plans.status NOT IN ('draft', 'retired')
    )
    UNION (
        SELECT
            id,
            plan_id,
            jurisdiction_id,
            jurisdiction_parent_id,
            jurisdiction_name,
            jurisdiction_depth,
            jurisdiction_path,
            jurisdiction_name_path,
            totStruct,
            targStruct,
            sprayed,
            found,
            totAreas,
            targAreas,
            visitedAreas,
            sprayCov,
            sprayCovTarg,
            foundCoverage,
            spraySuccess
        FROM pending_:schema .zambia_irs_lite_operational_areas
    )
)
AS main_query
ORDER BY main_query.jurisdiction_name;

CREATE INDEX IF NOT EXISTS zambia_irs_lite_jurisdictions_path_idx_gin on pending_:schema .zambia_irs_lite_jurisdictions using GIN(jurisdiction_path);
CREATE INDEX IF NOT EXISTS zambia_irs_lite_jurisdictions_plan_idx ON pending_:schema .zambia_irs_lite_jurisdictions (plan_id);
CREATE INDEX IF NOT EXISTS zambia_irs_lite_jurisdictions_jurisdiction_idx ON pending_:schema .zambia_irs_lite_jurisdictions (jurisdiction_id);
CREATE INDEX IF NOT EXISTS zambia_irs_lite_jurisdictions_jurisdiction_parent_idx ON pending_:schema .zambia_irs_lite_jurisdictions (jurisdiction_parent_id);
CREATE UNIQUE INDEX IF NOT EXISTS zambia_irs_lite_jurisdictions_idx ON pending_:schema .zambia_irs_lite_jurisdictions (id);

--
-- Move views
--

-- Drop existing deprecated views
DROP MATERIALIZED VIEW IF EXISTS deprecated_:schema .zambia_irs_lite_operational_areas CASCADE;
DROP MATERIALIZED VIEW IF EXISTS deprecated_:schema .zambia_irs_lite_jurisdictions CASCADE;

-- Move current views to deprecated_
ALTER MATERIALIZED VIEW zambia_irs_lite_jurisdictions SET SCHEMA deprecated_:schema;
ALTER MATERIALIZED VIEW zambia_irs_lite_operational_areas SET SCHEMA deprecated_:schema;

-- Move pending views to current schema
ALTER MATERIALIZED VIEW pending_:schema .zambia_irs_lite_jurisdictions SET SCHEMA :"schema";
ALTER MATERIALIZED VIEW pending_:schema .zambia_irs_lite_operational_areas SET SCHEMA :"schema";

COMMIT;
