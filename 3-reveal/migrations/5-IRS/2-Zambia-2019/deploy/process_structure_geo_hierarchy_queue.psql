-- Deploy reveal_irs_zambia_2019:process_structure_geo_hierarchy_queue to pg
-- requires: structure_geo_hierarchy
-- requires: create_structure_geo_hierarchy

BEGIN;

-- lets make it possible to create this function in any schema provided by the
-- :"schema" variable - and default to public.
SET search_path TO :"schema",public;

CREATE FUNCTION process_structure_geo_hierarchy_full() RETURNS VOID AS $$
-- this function is used when we need to reprocess all locations
-- WARNING: this is an expensive query!!
BEGIN
    -- first drop structure_geo_hierarchy_full
    DROP MATERIALIZED VIEW IF EXISTS structure_geo_hierarchy_full;
    -- then recreate it
    CREATE MATERIALIZED VIEW structure_geo_hierarchy_full AS
    SELECT DISTINCT ON (locations.id)
        locations.id AS id,
        locations.jurisdiction_id AS jurisdiction_id,
        COALESCE(geo_jurisdictions.geographic_level, jurisdictions.geographic_level) AS jurisdiction_depth,
        geo_jurisdictions.id AS geo_jurisdiction_id,
        geo_jurisdictions.geographic_level AS geo_jurisdiction_depth,
        public.ST_WITHIN(locations.geometry, geo_jurisdictions.geometry) AS geo_strict_within
        FROM locations
        LEFT JOIN jurisdictions AS jurisdictions
            ON jurisdictions.id = locations.jurisdiction_id
        LEFT JOIN jurisdictions AS geo_jurisdictions
            ON public.ST_DWITHIN(locations.geometry, geo_jurisdictions.geometry, 150.0 / 111111.0)
        WHERE
            geo_jurisdictions.id IS NOT NULL
            AND geo_jurisdictions.status != 'Inactive'
        ORDER BY
            locations.id ASC,
            geo_jurisdictions.geographic_level DESC,
            CASE
                WHEN geo_jurisdictions.id = locations.jurisdiction_id THEN 0
                ELSE 1
            END ASC,
            geo_jurisdictions.id ASC;
    -- empty structure_geo_hierarchy
    TRUNCATE structure_geo_hierarchy;
    -- repopulatestructure_geo_hierarchy
    INSERT INTO structure_geo_hierarchy SELECT * from structure_geo_hierarchy_full;
    -- empty the queues
    DELETE FROM structure_geo_hierarchy_structure_queue WHERE structure_id IN (SELECT id FROM structure_geo_hierarchy);
    TRUNCATE structure_geo_hierarchy_jurisdiction_queue;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION process_structure_geo_hierarchy_structure_queue(num_rows INTEGER DEFAULT 1000) RETURNS VOID AS $$
-- this function processes all the locations in the structure_geo_hierarchy_structure_queue table
DECLARE
    structure_row locations%ROWTYPE;
    structure_row_result BOOLEAN;
    existing_queries INTEGER;
BEGIN
    -- check if we are already running this query
    SELECT COUNT(*) FROM pg_stat_activity
    INTO existing_queries
    WHERE (now() - pg_stat_activity.query_start) > interval '1 minutes'
    AND query ILIKE '%process_structure_geo_hierarchy_structure_queue%';
    -- only process the queue if not already doing it
    IF existing_queries < 1 THEN
        FOR structure_row IN
            -- first get the relevant locations
            SELECT locations.*
            FROM structure_geo_hierarchy_structure_queue
            LEFT JOIN locations
            ON locations.id = structure_geo_hierarchy_structure_queue.structure_id
            LIMIT (num_rows)
        LOOP
            -- next lets process them
            SELECT create_structure_geo_hierarchy(structure_row) INTO structure_row_result;
            IF FOUND AND structure_row_result THEN
                -- finally delete the locations from the queue
                DELETE FROM structure_geo_hierarchy_structure_queue
                WHERE structure_id = structure_row.id;
            END IF;
        END LOOP;
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION process_structure_geo_hierarchy_jurisdiction_queue() RETURNS VOID AS $$
-- this function process all jurisdictions in the structure_geo_hierarchy_jurisdiction_queue table
-- when we have jurisdictions in the queue, we are forced to reprocess all locations
-- because any change in even one jurisdiction's geometry means that all locations
-- might need to be reprocessed
-- this function (re)processes all the locations in the locations table
-- WARNING: this is an expensive query!!
DECLARE
    queue_count INTEGER;
    existing_queries INTEGER;
BEGIN
    -- check if we are already running this query
    SELECT COUNT(*) FROM pg_stat_activity
    INTO existing_queries
    WHERE (now() - pg_stat_activity.query_start) > interval '1 minutes'
    AND query ILIKE '%process_structure_geo_hierarchy_jurisdiction_queue%';
    -- only process the queue if not already doing it
    IF existing_queries < 1 THEN
        -- only process the queue if it is populated
        SELECT count(id) FROM structure_geo_hierarchy_jurisdiction_queue INTO queue_count;
        IF queue_count > 0 THEN
            PERFORM process_structure_geo_hierarchy_full();
        END IF;
    END IF;
END;
$$ LANGUAGE plpgsql;

COMMIT;
