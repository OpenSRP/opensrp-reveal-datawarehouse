-- Deploy reveal_irs_zambia_2019:zambia_irs_structures to pg
-- requires: reveal_transaction_tables:structures
-- requires: zambia_structure_jurisdictions
-- requires: reveal_transaction_tables:events
-- requires: reveal_transaction_tables:tasks

BEGIN;

SET search_path TO :"schema",public;

-- Despite this being a very expensive query, it is implemented as a materialized view
-- because it relies on very high-traffic tables (events and tasks) and implementing it
-- in any other way may have unknown performance implications.
-- TODO: revisit if performance of the materialized view is a huge problem

CREATE MATERIALIZED VIEW IF NOT EXISTS pending_zambia_prod.zambia_irs_structures
AS
SELECT DISTINCT ON (locations.id, events_query.task_id)
    public.uuid_generate_v5(
        '6ba7b810-9dad-11d1-80b4-00c04fd430c8',
        concat(locations.id, events_query.task_id)) AS id,
    locations.id AS structure_id,
    locations.jurisdiction_id AS old_jurisdiction_id,
    zambia_structure_jurisdictions.jurisdiction_depth AS old_jurisdiction_depth,
    zambia_structure_jurisdictions.geo_jurisdiction_id AS geo_jurisdiction_id,
    zambia_structure_jurisdictions.geo_jurisdiction_depth AS geo_jurisdiction_depth,
    zambia_structure_jurisdictions.zambia_jurisdiction_id AS zambia_jurisdiction_id,
    zambia_structure_jurisdictions.zambia_jurisdiction_depth AS zambia_jurisdiction_depth,
    COALESCE(zambia_structure_jurisdictions.zambia_jurisdiction_id, locations.jurisdiction_id) AS structure_jurisdiction_id,
    locations.code AS structure_code,
    locations.name AS structure_name,
    locations.type AS structure_type,
    locations.geometry AS structure_geometry,
    locations.status AS structure_status,
    COALESCE(events_query.task_id, tasks_query.identifier) AS task_id,
    COALESCE(events_query.task_status, tasks_query.status) AS task_status,
    events_query.event_id AS event_id,
    COALESCE(events_query.plan_id, tasks_query.plan_identifier) AS plan_id,
    events_query.event_date AS event_date,
    COALESCE(events_query.rooms_eligible, 0) AS rooms_eligible,
    COALESCE(events_query.rooms_sprayed, 0) AS rooms_sprayed,
    COALESCE(events_query.eligibility, 'Eligible') AS eligibility,
    COALESCE(events_query.structure_sprayed, 'No') AS structure_sprayed,
    COALESCE(events_query.business_status, tasks_query.business_status, 'No Tasks') AS business_status,
    COALESCE(events_query.sprayed_values, ARRAY[]::varchar[]) AS sprayed_values,
    COALESCE(events_query.notsprayed_reasons, ARRAY[]::varchar[]) AS notsprayed_reasons,
    COALESCE(events_query.duplicate, FALSE) AS duplicate,
    COALESCE(events_query.sprayed_duplicate, FALSE) AS sprayed_duplicate
FROM zambia_prod.locations AS locations
INNER JOIN zambia_prod.zambia_structure_jurisdictions ON zambia_structure_jurisdictions.id = locations.id
LEFT JOIN LATERAL (
    SELECT
        subq.task_id AS task_id,
        subq.task_status AS task_status,
        subq.event_id AS event_id,
        subq.event_date AS event_date,
        subq.plan_id AS plan_id,
        subq.rooms_eligible AS rooms_eligible,
        subq.rooms_sprayed AS rooms_sprayed,
        subq.eligibility AS eligibility,
        subq.structure_sprayed AS structure_sprayed,
        subq.business_status AS business_status,
        subq.notsprayed_reason AS notsprayed_reason,
        array_agg(subq.structure_sprayed) OVER (PARTITION BY structure_sprayed) AS sprayed_values,
        array_agg(subq.notsprayed_reason) FILTER (WHERE subq.notsprayed_reason != '') OVER (PARTITION BY notsprayed_reason) AS notsprayed_reasons,
        array_length(array_agg(subq.structure_sprayed) OVER (PARTITION BY structure_sprayed), 1) > 1 AS duplicate,
        'yes' = ANY (array_agg(subq.structure_sprayed) OVER (PARTITION BY structure_sprayed)) AND array_length(array_agg(subq.structure_sprayed) OVER (PARTITION BY structure_sprayed), 1) > 1 AS sprayed_duplicate
    FROM
    (
        SELECT
            DISTINCT ON (events.task_id)
            events.id AS event_id,
            events.task_id AS task_id,
            events.event_date AS event_date,
            tasks.plan_identifier AS plan_id,
            tasks.status AS task_status,
            -- get fields from JSON --
            COALESCE (events.form_data->'rooms_eligible'->>0, '0')::int AS rooms_eligible,
            COALESCE (events.form_data->'rooms_sprayed'->>0, '0')::int AS rooms_sprayed,
            COALESCE (events.form_data->'eligibility'->>0, 'Eligible')::text AS eligibility,
            COALESCE (events.form_data->'structure_sprayed'->>0, 'No')::text AS structure_sprayed,
            events.form_data->'business_status'->>0 AS business_status,
            COALESCE (events.form_data->'notsprayed_reason'->>0, '')::text AS notsprayed_reason
            -- end get fields from JSON --
        FROM zambia_prod.events AS events
        LEFT JOIN zambia_prod.tasks AS tasks
            ON tasks.identifier = events.task_id
        WHERE locations.id = events.base_entity_id
        AND events.entity_type = 'Structure'
        AND events.event_type = 'Spray'
    ) AS subq
    ORDER BY
        subq.event_date DESC,
        subq.structure_sprayed DESC,
        subq.rooms_sprayed DESC,
        subq.rooms_eligible DESC
    LIMIT 1
) AS events_query ON true
LEFT JOIN LATERAL (
    SELECT
        tasks.identifier,
        tasks.server_version,
        tasks.plan_identifier,
        tasks.status,
        tasks.business_status
    FROM zambia_prod.tasks AS tasks
    WHERE tasks.task_for = locations.id
    AND tasks.plan_identifier IN ('d40c1227-644b-55d6-b3f3-bed42380322f')
    AND tasks.status != 'Cancelled'
    ORDER BY tasks.server_version DESC
    LIMIT 1
) AS tasks_query ON true
WHERE locations.status != 'Inactive';

CREATE INDEX IF NOT EXISTS zambia_irs_strcts_structure_sprayed_idx ON pending_zambia_prod.zambia_irs_structures (structure_sprayed);
CREATE INDEX IF NOT EXISTS zambia_irs_strcts_business_status_idx ON pending_zambia_prod.zambia_irs_structures (business_status);
CREATE INDEX IF NOT EXISTS zambia_irs_strcts_sprayed_duplicate_idx ON pending_zambia_prod.zambia_irs_structures (sprayed_duplicate);
CREATE INDEX IF NOT EXISTS zambia_irs_strcts_duplicate_idx ON pending_zambia_prod.zambia_irs_structures (duplicate);
CREATE INDEX IF NOT EXISTS zambia_irs_strcts_notsprayed_reasons_idx ON pending_zambia_prod.zambia_irs_structures using GIN(notsprayed_reasons);
CREATE INDEX IF NOT EXISTS zambia_irs_strcts_event_date_idx ON pending_zambia_prod.zambia_irs_structures (event_date);
CREATE INDEX IF NOT EXISTS zambia_irs_strcts_task_id_idx ON pending_zambia_prod.zambia_irs_structures (task_id);
CREATE INDEX IF NOT EXISTS zambia_irs_strcts_plan_id_idx ON pending_zambia_prod.zambia_irs_structures (plan_id);
CREATE INDEX IF NOT EXISTS zambia_irs_strcts_plan_jurisdiction_id_idx ON pending_zambia_prod.zambia_irs_structures (plan_id, structure_jurisdiction_id);
CREATE INDEX IF NOT EXISTS zambia_irs_strcts_structure_jurisdiction_idx ON pending_zambia_prod.zambia_irs_structures (structure_jurisdiction_id);
CREATE INDEX IF NOT EXISTS zambia_irs_strcts_old_jurisdiction_idx ON pending_zambia_prod.zambia_irs_structures (old_jurisdiction_id);
CREATE INDEX IF NOT EXISTS zambia_irs_strcts_geom_gix ON pending_zambia_prod.zambia_irs_structures USING GIST (structure_geometry);
CREATE UNIQUE INDEX IF NOT EXISTS zambia_irs_strcts_structure_task_idx ON pending_zambia_prod.zambia_irs_structures (structure_id, task_id);
CREATE UNIQUE INDEX IF NOT EXISTS zambia_irs_strcts_idx ON pending_zambia_prod.zambia_irs_structures (id);

COMMIT;
