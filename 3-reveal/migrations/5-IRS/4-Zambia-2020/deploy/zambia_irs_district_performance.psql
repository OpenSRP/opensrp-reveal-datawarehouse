-- Deploy reveal_irs_zambia_2020:zambia_irs_district_performance to pg
-- requires: zambia_irs_spray_event

BEGIN;

SET search_path TO :"schema",public;

CREATE MATERIALIZED VIEW IF NOT EXISTS zambia_irs_district_performance AS
SELECT
  subq.*,
  avg_time.start_time AS start_time,
  avg_time.end_time AS end_time,
  avg_time.field_duration AS field_duration,
  COALESCE(subq.found / NULLIF(avg_time.days_worked, 0)::DECIMAL, subq.found) AS avg_found,
  COALESCE(subq.sprayed / NULLIF(avg_time.days_worked, 0)::DECIMAL, subq.sprayed) AS avg_sprayed,
  COALESCE(subq.refused / NULLIF(avg_time.days_worked, 0)::DECIMAL, subq.refused) AS avg_refused,
  CASE 
    WHEN (subq.sprayed > 0 AND avg_time.days_worked = 0) THEN 1 ELSE avg_time.days_worked
  END AS days_worked,
  CASE 
    WHEN subq.daily_sprayed = 0 THEN 0
    ELSE subq.bottles_empty / subq.daily_sprayed::DECIMAL 
  END AS usage_rate,
  CASE
    WHEN (subq.found_diff = 0 AND subq.sprayed_diff = 0 ) THEN TRUE ELSE FALSE
  END AS data_quality_check
FROM
(
  WITH aggregates as(
    SELECT
      public.uuid_generate_v5(
        '6ba7b810-9dad-11d1-80b4-00c04fd430c8',
        concat(district_id, spray_event.plan_id)
      ) AS id,
      spray_event.plan_id,
      district_id,
      district_name,
      sum(found) as found,
      sum(sprayed) as sprayed,
      sum(refused) as refused,
      sum(other_reason) as other_reason,
      COALESCE(sum(daily_summary.bottles_full), 0) AS bottles_full,
      COALESCE(sum(daily_summary.bottles_accounted), 0) AS bottles_accounted,
      COALESCE(sum(daily_summary.bottles_empty), 0) AS bottles_empty,
      COALESCE(sum(daily_summary.bottles_lostdamaged), 0) AS bottles_lostdamaged,
      COALESCE(sum(daily_summary.bottles_start), 0) AS bottles_start,
      COALESCE(sum(daily_summary.daily_found), 0) AS daily_found,
      COALESCE(sum(daily_summary.daily_sprayed), 0) AS daily_sprayed
    FROM zambia_irs_spray_event AS spray_event
    INNER JOIN zambia_daily_summary_event AS daily_summary
      ON daily_summary.location_id = spray_event.location_id
      AND daily_summary.plan_id = daily_summary.plan_id
      AND daily_summary.event_date = spray_event.event_date
      AND daily_summary.provider_id = spray_event.data_collector
      AND daily_summary.sop = spray_event.sop
    GROUP BY spray_event.plan_id, district_id, spray_event.plan_id, district_name
  )
    SELECT
    aggregates.*,
    COALESCE(aggregates.sprayed - aggregates.daily_sprayed, aggregates.sprayed) AS sprayed_diff,
    COALESCE(aggregates.found - aggregates.daily_found, aggregates.found) AS found_diff
  FROM aggregates
) as subq
LEFT JOIN zambia_irs_district_avg_time as avg_time
  ON avg_time.plan_id = subq.plan_id
  AND avg_time.district_id = subq.district_id;

CREATE INDEX IF NOT EXISTS zambia_irs_district_performance_plan_id_idx ON zambia_irs_district_performance (plan_id);
CREATE INDEX IF NOT EXISTS zambia_irs_district_performance_district_id_idx ON zambia_irs_district_performance (district_id);
CREATE UNIQUE INDEX IF NOT EXISTS zambia_irs_district_performance_idx ON zambia_irs_district_performance (id);

COMMIT;
