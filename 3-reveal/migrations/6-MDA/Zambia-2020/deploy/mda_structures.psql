-- Deploy reveal_mda_zambia_2020:mda_structures to pg
-- requires: reveal_transaction_tables:plans
-- requires: reveal_transaction_tables:events
-- requires: reveal_transaction_tables:jurisdictions
-- requires: reveal_transaction_tables:clients
-- requires: reveal_transaction_tables:locations
-- requires: reveal_transaction_tables:tasks
-- requires: reveal_database_views:jurisdictions_materialized_view

BEGIN;

SET search_path TO :"schema",public;

CREATE OR REPLACE VIEW ntd_dispense_structures AS
SELECT
    plans.identifier AS plan_id,
    locations.id AS location_id,
    jurisdictions.jurisdiction_id AS jurisdiction_id,
    jurisdictions.jurisdiction_parent_id AS jurisdiction_parent_id,
    jurisdictions.jurisdiction_name AS jurisdiction_name,
    jurisdictions.jurisdiction_depth AS jurisdiction_depth,
    jurisdictions.jurisdiction_path AS jurisdiction_path,
    jurisdictions.jurisdiction_name_path AS jurisdiction_name_path,
    COALESCE(mda_dispence_query.nPzqDistribute, 0) AS nPzqDistribute,
    COALESCE(mda_dispence_query.availableForTreatment, 0) AS availableForTreatment,
    COALESCE(mda_dispence_query.nPzqDistributedQuantity, 0) AS nPzqDistributedQuantity,
    COALESCE(client_info_query.nsac, 0) AS nsac,
    COALESCE(client_info_query.visited, 0) AS structure_visited
FROM plans
LEFT JOIN plan_jurisdiction AS plan_jurisdiction
    ON plans.identifier = plan_jurisdiction.plan_id
LEFT JOIN locations AS locations
    ON locations.jurisdiction_id = plan_jurisdiction.jurisdiction_id
LEFT JOIN jurisdictions_materialized_view AS jurisdictions
    ON plan_jurisdiction.jurisdiction_id = jurisdictions.jurisdiction_id
LEFT JOIN LATERAL (
    SELECT
        COUNT(DISTINCT t1.identifier) AS visited,
        COALESCE(SUM(COALESCE(c1.attributes->>'nsac', '0')::INTEGER), 0) AS nsac
    FROM tasks AS t1
    LEFT JOIN events AS e2
        ON t1.identifier = e2.task_id
    LEFT JOIN clients AS c1
        ON e2.base_entity_id = c1.baseentityid
    WHERE t1.group_identifier = plan_jurisdiction.jurisdiction_id
    AND t1.task_for = locations.id
    AND t1.plan_identifier = plans.identifier
    AND t1.code IN ('Structure_Visited', 'Structure Visited')
    AND t1.status IN ('Completed')
) AS client_info_query ON true
LEFT JOIN LATERAL (
    SELECT
        CASE
            WHEN e1.form_data->>'nPzqDistribute' = 'Yes' THEN 1
            ELSE 0
        END AS nPzqDistribute,
        CASE
            WHEN e1.form_data->>'availableForTreatment' = 'Yes' THEN 1
            ELSE 0
        END AS availableForTreatment,
        COALESCE(COALESCE(e1.form_data->>'nPzqDistributedQuantity', '0')::DECIMAL, 0) AS nPzqDistributedQuantity
    FROM tasks AS t2
    LEFT JOIN events AS e1
        ON t2.identifier = e1.task_id
    LEFT JOIN clients AS c1
        ON t2.task_for = c1.baseentityid
    WHERE c1.residence = locations.id
    AND t2.group_identifier = plan_jurisdiction.jurisdiction_id
    AND t2.plan_identifier = plans.identifier
    AND t2.code IN ('MDA_Dispense')
    AND t2.business_status NOT IN ('Not Visited')
    AND t2.status NOT IN ('Cancelled')
) AS mda_dispence_query ON true
WHERE
    plans.intervention_type = 'Dynamic-MDA'
    AND plans.status IN ('active', 'complete')
    AND locations.id IS NOT NULL;

COMMIT;
